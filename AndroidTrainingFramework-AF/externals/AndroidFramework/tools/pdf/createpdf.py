import os, sys, imp


import imp
try:
    imp.find_module('reportlab')    
except ImportError:
    print('WARNING: the reportlab python module is not installed! Pdf will not be generated!')
    sys.exit(0)
    

from reportlab.pdfgen.canvas import Canvas
from reportlab.platypus import Paragraph, SimpleDocTemplate, Spacer, Table
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import cm, mm, inch, pica
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors


def isEnv(name):
	if not os.environ.get(name):
		return False
	else:
		return True
		
def checkEnvNotExistOrEmpty(name):
	if (not isEnv(name)) or os.environ.get(name).strip() == "":
		return True
	else:
		return False

def writePDF(fileName):
	try:
		style = getSampleStyleSheet()
		pdf = SimpleDocTemplate(fileName, pagesize = letter)
		array = []
		
		#**TITLE**
		para = Paragraph("<para align='center'><b><font size=18>%s</font><b></para>" %(os.environ.get("GAME_NAME")), style["Normal"])
		array.append(para)
		array.append(Spacer(inch * .15, inch * .15))
		para = Paragraph("<para align='center' leftIndent=0><font size=12>version %s.%s.%s</font></para>" %(os.environ.get("VERSION_MAJOR"),os.environ.get("VERSION_MINOR"),os.environ.get("VERSION_BUILD")), style["Normal"])
		array.append(para)
		array.append(Spacer(inch * .2, inch * .2))
		
		#**Note**
		text =  "This file is auto generated by the build process, "
		text += "and has the settings from the last compiled version, "
		text += "the developer, should send the file along with the apk file to QA."
		para = Paragraph("<para align='justify'><font color='%s'>%s</font></para>" %("black",text), style["Normal"])
		array.append(para)
		array.append(Spacer(inch * .1, inch * .1))
		
		#** Basic values**
		data = [[Paragraph("<font color='%s'><strong>Game Details</strong></font>" %("black"), style["Normal"]),		''],
				['Game name',			os.environ.get("GAME_NAME")],
				['Game version',		"\"%s.%s.%s\"" %(os.environ.get("VERSION_MAJOR"),os.environ.get("VERSION_MINOR"),os.environ.get("VERSION_BUILD"))],
				#['Android API',			"\"%s\"" %(os.environ.get("API_LEVEL_NAME"))],
				['Operator',			"\"%s\"" %(os.environ.get("OPERATOR"))],
				['Application name',	"\"%s\"" %(os.environ.get("APP_NAME"))],
				['Package',				"\"%s\"" %(os.environ.get("APP_PACKAGE"))],
				['Save folder',			os.environ.get("SAVE_FOLDER") + "\n Could differ for Android  2.2+ devices"],
				['Data folder',			os.environ.get("SD_FOLDER")],
				['Demo code',			checkEnvNotExistOrEmpty("GL_DEMO_CODE") and ' ' or "\"%s\"" %(os.environ.get("GL_DEMO_CODE"))],
				['Game code',			checkEnvNotExistOrEmpty("GGC_GAME_CODE")and ' ' or "\"%s\"" %(os.environ.get("GGC_GAME_CODE"))],
				['Product ID code',		checkEnvNotExistOrEmpty("GL_PRODUCT_ID")and ' ' or os.environ.get("GL_PRODUCT_ID")],
				['GGI code',			checkEnvNotExistOrEmpty("GGI")			and ' ' or os.environ.get("GGI")]]
				
		ts = [	('LINEBELOW', (0, 0), (-1, 0), 0.5, colors.black),
				('TEXTCOLOR', (1, 0), (1, -1), colors.blue)]
				
		if checkEnvNotExistOrEmpty("GL_DEMO_CODE"):
			ts.append(('TEXTCOLOR', (0, 9),	(0, 9), colors.red))
		if checkEnvNotExistOrEmpty("GGC_GAME_CODE"):
			ts.append(('TEXTCOLOR', (0, 10), (0, 10), colors.red))
		if checkEnvNotExistOrEmpty("GL_PRODUCT_ID"):
			ts.append(('TEXTCOLOR', (0, 11), (0, 11), colors.red))
		
		table = Table(data, style=ts)
		array.append(table)
		array.append(Spacer(inch * .1, inch * .1))
		
		
		#**Installer Features**
		text = Paragraph("<font color='%s'><strong>Installer Features</strong></font>" %("black"), style["Normal"])
		value = "Version " + os.environ.get("INSTALLER_VERSION");
		data = [[text, value]]
		
		#**Android Installer**
		text = "Android Installer \"download resources\""
		value = os.environ.get("USE_INSTALLER") == "1" and "Activated" or "Deactivated"
		data.append([text, value])
		
		if os.environ.get("USE_INSTALLER") == "1":
			#**Use update version**
			text = "Installer update version"
			value = os.environ.get("USE_UPDATE_VERSION") == "1" and "Activated" or "Deactivated"
			data.append([text, value])
					
			#**Using download manager**
			text = "Download manager"
			value = os.environ.get("USE_DOWNLOAD_MANAGER") == "1" and "Activated" or "Deactivated"
			data.append([text, value])
			
			#**Download native code**
			text = "Download native code"
			value = os.environ.get("ENABLE_DOWNLOAD_NATIVE") == "1" and "Activated" or "Deactivated"
			data.append([text, value])
			
			#**Installation location**
			text = "Installation location (move to SD)"
			value = os.environ.get("USE_INSTALLATION_LOCATION") == "1" and "Activated" or "Deactivated"
			data.append([text, value])
			
			#**Force WIFI only**
			text = "Current installer flow mode"
			value = os.environ.get("FORCE_WIFI_ONLY_MODE") == "1" and "Wifi Only mode activated" or "Wifi and Wifi/3G dynamic activated"
			data.append([text, value])
			
		ts = [	('LINEBELOW',	(0, 0), (-1, 0), 0.5, colors.black),
				('TEXTCOLOR', 	(1, 0),	(1, -1), colors.blue)]
		table = Table(data, style=ts)
		array.append(table)
		array.append(Spacer(inch * .1, inch * .1))
		
		#**Tracking**
		data = []
		text = Paragraph("<font color='%s'><strong>Tracking Features</strong></font>" %("black"), style["Normal"])
		data.append([text])
		
		#**Tracking for game and phone specifications
		text = "Tracking for phone and game specs (Antipiracy)"
		value = (os.environ.get("USE_INSTALLER") == "1" and os.environ.get("USE_GAME_TRACKING") == "1") and "Activated" or "Deactivated"
		data.append([text, value])
		
		#**Tracking for resource download**
		text = "Tracking for resource download"
		value = os.environ.get("USE_TRACKING_FEATURE_INSTALLER") == "1" and "Activated" or "Deactivated"
		data.append([text, value])
			
		#**Tracking for unsupported device** 
		text = "Tracking for unsupported device"
		value = os.environ.get("USE_TRACKING_UNSUPPORTED_DEVICE") == "1" and "Activated" or "Deactivated"
		data.append([text, value])
		
		ts = [	('LINEBELOW',	(0, 0), (-1, 0), 0.5, colors.black),
				('TEXTCOLOR', 	(1, 0),	(1, -1), colors.blue)]
		table = Table(data, style=ts)
		array.append(table)
		array.append(Spacer(inch * .1, inch * .1))
		
		#**Java Debug Logs**
		text = Paragraph("<font color='%s'><strong>Java debugging logs</strong></font>" %("black"), style["Normal"])
		value = os.environ.get("RELEASE_VERSION") == "0" and "Activated" or "Deactivated"
		data =[[text, value]]
		
		if os.environ.get("RELEASE_VERSION") == "0":
			ts = [('TEXTCOLOR', (1, 0),	(1, -1), colors.red)]
		else:
			ts = [('TEXTCOLOR', (1, 0),	(1, -1), colors.blue)]
		
		table = Table(data, style=ts)
		array.append(table)
		array.append(Spacer(inch * .3, inch * .3))
		
		#**Title: Data and server information**
		data = []
		ts = []
		text = Paragraph("<font color='%s'><strong>Data and server information</strong></font>" %("black"), style["Normal"])
		data.append([text])
		
		if os.environ.get("USE_MARKET_INSTALLER") == "1" or os.environ.get("USE_DYNAMIC_DOWNLOAD_LINK") == "1":
			#**Market Installer download link or Dynamic download link**
			if os.environ.get("USE_MARKET_INSTALLER") == "1":
				text = "Market Installer download link"
			else:
				text = "Dynamic download link"
			value = os.environ.get("DOWNLOAD_URL")
			data.append([text, value])
			
			#**Portal Code**#
			text = "Portal Code"
			value = os.environ.get("PORTAL_CODE")
			data.append([text, value])
		else:
			#**ATC download link**
			text = "ATC download link"
			value = os.environ.get("DATA_DOWNLOAD_SERVER") + os.environ.get("DOWNLOAD_FILE_NAME_ATC")
			data.append([text, value])
			#**PVRT download link**
			text = "PVRT download link"
			value = os.environ.get("DATA_DOWNLOAD_SERVER") + os.environ.get("DOWNLOAD_FILE_NAME_PVR")
			data.append([text, value])
			#**ETC download link**
			text = "ETC download link"
			value = os.environ.get("DATA_DOWNLOAD_SERVER") + os.environ.get("DOWNLOAD_FILE_NAME_ETC")
			data.append([text, value])
			#**DXT download link**
			text = "DXT download link"
			value = os.environ.get("DATA_DOWNLOAD_SERVER") + os.environ.get("DOWNLOAD_FILE_NAME_DXT")
			data.append([text, value])
		
		ts = [	('LINEBELOW', (0, 0), (-1, 0), 0.5, colors.black),
				('TEXTCOLOR', (1, 0), (1, -1), colors.blue)]
		table = Table(data, style=ts)
		array.append(table)
		array.append(Spacer(inch * .1, inch * .1))
		
		#**Antipiracy**
		USE_ANTYPIRACY = False
		if os.environ.get("GLOFT_DRM") == "1":
			USE_ANTYPIRACY = True
		if os.environ.get("VERIZON_DRM") == "1":
			USE_ANTYPIRACY = True
		if os.environ.get("USE_SKT_DRM") == "1":
			USE_ANTYPIRACY = True
		if os.environ.get("USE_LGU_DRM") == "1":
			USE_ANTYPIRACY = True
		if os.environ.get("USE_KT_DRM") == "1":
			USE_ANTYPIRACY = True
		if os.environ.get("GOOGLE_DRM") == "1":
			USE_ANTYPIRACY = True
		if os.environ.get("USE_HEP_ANTIPIRACY") == "1":
			USE_ANTYPIRACY = True
		if os.environ.get("TMOBILE_DRM") == "1":
			USE_ANTYPIRACY = True 
		if os.environ.get("USE_SAMSUNG_DRM") == "1":
			USE_ANTYPIRACY = True 
		if os.environ.get("ORANGE_DRM") == "1":
			USE_ANTYPIRACY = True 
		if os.environ.get("USE_LGW_DRM") == "1": #FOR_LGW_GLOBAL
			USE_ANTYPIRACY = True 
		if os.environ.get("USE_OPTUS_DRM") == "1":
			USE_ANTYPIRACY = True 
		
		ts = [('TEXTCOLOR', (1, 0),	(1, -1), colors.blue)]
		row = 0
		#**Title: Anti Piracy Feature**
		text = Paragraph("<font color='%s'><strong>Anti Piracy Feature</strong></font>" %("black"), style["Normal"])
		
		color = "blue"
		if os.environ.get("USE_INSTALLER") == "1" and USE_ANTYPIRACY == True :
			value = "Activated"
			ts.append(('LINEBELOW',	(0, 0), (-1, 0), 0.5, colors.black))
		else:
			value = "Deactivated"
			ts.append(('TEXTCOLOR', (1, row), (1, row), colors.red))
			row = row + 1
		data = [[text, value]]
		
		if USE_ANTYPIRACY == True :
			text = "Anti piracy version"
			
			if os.environ.get("GLOFT_DRM") == "1":
				value = "Native DRM"
				data.append([text, value]) 
			if os.environ.get("USE_SAMSUNG_DRM") == "1":
				value = "Samsung DRM (Zirconia)"
				data.append([text, value]) 
			if os.environ.get("VERIZON_DRM") == "1":
				value = "Verizon DRM"
				data.append([text, value])
				data.append(["TEST VERIZON DRM", os.environ.get("TEST_VERIZON_DRM") == "1" and "Activated" or "Deactivated"])
			if os.environ.get("USE_SKT_DRM") == "1":
				value = "SKT DRM"
				data.append([text, value])
				data.append(["SKT DRM AID", os.environ.get("SKT_DRM_AID")])
			if os.environ.get("USE_LGU_DRM") == "1":
				value = "LG DRM"
				data.append([text, value])
				data.append(["LGU DRM AID", os.environ.get("LGU_DRM_AID")])
			if os.environ.get("USE_KT_DRM") == "1":
				value = "KT DRM"
				data.append([text, value])
			if os.environ.get("GOOGLE_DRM") == "1":
				value = "Google DRM"
				data.append([text, value])
				data.append(["TEST GOOGLE DRM", os.environ.get("TEST_GOOGLE_DRM") == "1" and "Activated" or "Deactivated"])
			if os.environ.get("USE_HEP_ANTIPIRACY") == "1":
				text = "HEP Antipiracy"
				value = os.environ.get("USE_HEP_ANTIPIRACY") == "1" and "Activated" or "Deactivated"
				data.append([text, value])
			if os.environ.get("TMOBILE_DRM") == "1":
				text = "TMobile Antipiracy"
				value = os.environ.get("TMOBILE_DRM") == "1" and "Activated" or "Deactivated"
				data.append([text, value])
				data.append(["TMobile Game ID", os.environ.get("TMO_ITEM_ID")])
			if os.environ.get("GLOFT_DRM") == "1" :
				text = Paragraph("serialkey.txt <font color='%s'>must be empty</font> when submit to Gameloft shop" %(colors.red), style["Normal"])
				filename = os.environ.get("TMP_RES_FOLDER") + "/raw/serialkey.txt"
				f = open(filename, "r")
				value = "\""+f.read()+"\""
				data.append([text, value])
			if os.environ.get("ORANGE_DRM") == "1":
				value = "Orange DRM"
				data.append([text, value])
				value = os.environ.get("ORANGE_DRM_TEST") == "1" and "Activated" or "Deactivated"
				data.append(["ORANGE_DRM_TEST", value])
			if os.environ.get("USE_LGW_DRM") == "1":
				value = "LGW DRM"
				data.append([text, value])
				value = os.environ.get("FOR_LGW_GLOBAL") == "1" and "Activated" or "Deactivated"
				data.append(["LGW GLOBAL", value])
			if os.environ.get("USE_OPTUS_DRM") == "1":
				value = "Optus DRM"
				data.append([text, value])
		table = Table(data, style=ts)
		array.append(table)
		array.append(Spacer(inch * .1, inch * .1))
		
		#**Title: GLLive**		
		ts = [('TEXTCOLOR', (1, 0),	(1, -1), colors.blue)]
		
		text = Paragraph("<font color='%s'><strong>GLLive</strong></font>" %("black"), style["Normal"])
		value = os.environ.get("USE_GLLIVE") == "1" and "Activated" or "Deactivated"
		data = [[text, value]]
		
		table = Table(data, style=ts)
		array.append(table)
		array.append(Spacer(inch * .1, inch * .1))
		
		#**IGP HTML**
		data = []
		ts = [('TEXTCOLOR', (1, 0),	(1, -1), colors.blue)]
		
		#**IGP Activity**
		text = Paragraph("<font color='%s'><strong>IGP</strong></font>" %("black"), style["Normal"])
		value = os.environ.get("USE_IGP_ACTIVITY") == "1" and "Activated" or "Deactivated"
		data.append([text, value])
		
		#**IGP Freemium**
		text = Paragraph("<font color='%s'><strong>IGP Freemium</strong></font>" %("black"), style["Normal"])
		value = os.environ.get("USE_IGP_FREEMIUM") == "1" and "Activated" or "Deactivated"
		data.append([text, value])
		
		if os.environ.get("USE_IGP_ACTIVITY") == "1" or os.environ.get("USE_IGP_FREEMIUM") == "1":
			ts.append(('LINEBELOW',	(0, 0), (-1, 0), 0.5, colors.black))
			#**IGP SKT** 
			text = "IGP SKT"
			value = os.environ.get("IGP_SKT") == "1" and "Activated" or "Deactivated"
			data.append([text, value])
		
		table = Table(data, style=ts)
		array.append(table)
		array.append(Spacer(inch * .1, inch * .1))
		
		#**Video Player**
		data = []
		ts = [('TEXTCOLOR', (1, 0),	(1, -1), colors.blue)]
		
		text = Paragraph("<font color='%s'><strong>Video Player</strong></font>" %("black"), style["Normal"])
		value = os.environ.get("USE_VIDEO_PLAYER") == "1" and "Activated" or "Deactivated"
		data.append([text, value])
		
		table = Table(data, style=ts)
		array.append(table)
		array.append(Spacer(inch * .1, inch * .1))
		
		#**Push Notifications Portal**
		data = []
		ts = [('TEXTCOLOR', (1, 0),	(1, -1), colors.blue)]
		
		#**Push Notifications Portal**
		text = Paragraph("<font color='%s'><strong>Push Notifications</strong></font>" %("black"), style["Normal"])
		value = os.environ.get("USE_PUSH_NOTIFICATION_C2DM") == "1" and "Activated" or "Deactivated"
		data.append([text, value])
		
		if os.environ.get("USE_PUSH_NOTIFICATION_C2DM") == "1":
			ts.append(('LINEBELOW',	(0, 0), (-1, 0), 0.5, colors.black))
			
			#**PANDORA URL** 
			text = "URL"
			value = os.environ.get("PANDORA_URL")
			data.append([text, value])
			if checkEnvNotExistOrEmpty("PANDORA_URL"):#(not isEnv("PSS_URL") or os.environ.get("PSS_URL").strip() == ""):
				ts.append(('TEXTCOLOR', (0, 1),	(0, 1), colors.red))
				
			#**Mode Hermes / XPlayer** 
			text = "Mode"
			value = os.environ.get("PN_USE_HERMES") == "1" and "Hermes" or "XPlayer"
			data.append([text, value])
			
			#**Client ID** 
			text = "Client ID"
			value = os.environ.get("CLIENTID")
			data.append([text, value])
		

		table = Table(data, style=ts)
		array.append(table)
		array.append(Spacer(inch * .1, inch * .1))

		#**Splash Promotional Screen**
		data = []
		ts = [('TEXTCOLOR', (1, 0),	(1, -1), colors.blue)]
		
		#**Promotional Splash Screen**
		text = Paragraph("<font color='%s'><strong>Promotional Splash Screen</strong></font>" %("black"), style["Normal"])
		value = os.environ.get("USE_PSS") == "1" and "Activated" or "Deactivated"
		data.append([text, value])
		
		if os.environ.get("USE_PSS") == "1":
			ts.append(('LINEBELOW',	(0, 0), (-1, 0), 0.5, colors.black))
			
			#**PSS URL** 
			text = "URL"
			value = os.environ.get("PSS_URL")
			data.append([text, value])
			if checkEnvNotExistOrEmpty("PSS_URL"):#(not isEnv("PSS_URL") or os.environ.get("PSS_URL").strip() == ""):
				ts.append(('TEXTCOLOR', (0, 1),	(0, 1), colors.red))
				
			#**PSS Disable option** 
			text = "Disable option"
			value = os.environ.get("PSS_USE_DISABLE_OPTION") == "1" and "Activated" or "Deactivated"
			data.append([text, value])
			
			#**Verizon Version for PSS** 
			text = "Verizon Version for PSS"
			value = os.environ.get("PSS_VZW") == "1" and "Activated" or "Deactivated"
			data.append([text, value])
		
		table = Table(data, style=ts)
		array.append(table)
		array.append(Spacer(inch * .1, inch * .1))
		
		if  os.environ.get("USE_HEP_PACKINFO") == "1" or os.environ.get("USE_HEP_EXT_IGPINFO") == "1" or os.environ.get("USE_HEP_IGP_PORTAL") == "1" or os.environ.get("AUTO_UPDATE_HEP") == "1":
			#**Handset Embedded Program*
			data = []
			ts = [('TEXTCOLOR', 	(1, 0),	(1, -1), colors.blue)]
			text = Paragraph("<font color='%s'><strong>HEP (Handset Embedded Program)</strong></font>" %("black"), style["Normal"])
			data.append([text])
		
			#**Auto update HEP**
			if os.environ.get("AUTO_UPDATE_HEP") == "1":
				text = "Auto update HEP"
				value = os.environ.get("AUTO_UPDATE_HEP") == "1" and "Activated" or "Deactivated"
				data.append([text, value])
				
			#**HEP Pack info**
			if os.environ.get("USE_HEP_PACKINFO") == "1":
				text = "HEP Pack Info"
				value = os.environ.get("USE_HEP_PACKINFO") == "1" and "Activated" or "Deactivated"
				data.append([text, value])
		
			#**HEP External IGP info**
			if os.environ.get("USE_HEP_EXT_IGPINFO") == "1":
				text = "HEP External IGP Info"
				value = os.environ.get("USE_HEP_EXT_IGPINFO") == "1" and "Activated" or "Deactivated"
				data.append([text, value])
			
			#**HEP IGP Portal**
			if os.environ.get("USE_HEP_IGP_PORTAL") == "1":
				text = "HEP IGP Portal"
				value = os.environ.get("USE_HEP_IGP_PORTAL") == "1" and "Activated" or "Deactivated"
				data.append([text, value])
		
			ts = [	('LINEBELOW', (0, 0), (-1, 0), 0.5, colors.black),
					('TEXTCOLOR', (1, 0), (1, -1), colors.blue)]
			table = Table(data, style=ts)
			array.append(table)
		array.append(Spacer(inch * .1, inch * .1))
		
		pdf.build(array)
	except IOError:
			print "IOerror Creating file[%s] " %(fileName)		

if __name__ == "__main__":
	fileName = sys.argv[1]
	writePDF(fileName)
	